import React from 'react';
import * as d3 from 'd3';
import './styles.scss';

class D3CountyViz extends React.Component {

  constructor(props) {
    super(props);
    
    this.state = {
      results: this.props.data,
      height: 250,
      width: 250,
      margin: {top: 5, right: 5, bottom: 5, left: 5}
    };
  }

    componentDidMount() {

        const {results, margin, width, height} = this.state;
        this.drawPieChart(results.gender, width, height, d3.scaleOrdinal(['#e76f51','#2a9d8f']));
        this.drawPieChart(results.age, width, height, d3.scaleOrdinal(['#e76f51','#2a9d8f', '#e9c46a', '#f4a261']));
        this.drawPieChart(results.size, width, height, d3.scaleOrdinal(['#e76f51','#2a9d8f', '#e9c46a', '#f4a261']));
        this.drawBreeds(results.breed, 500, 500, d3.scaleOrdinal(['#e76f51','#2a9d8f', '#e9c46a']));


    }

    drawBreeds(results, width, height){
        var breed_dict = {
            pitbull: ["Pit Bull Terrier", "American Staffordshire Terrier"],
            yorkshire_terrier: ["Yorkshire Terrier"],
            chihuahua: ["Chihuahua"],
            jack_russell_terrier: ["Jack Russell Terrier"],
            labrador_retriever: ["Black Labrador Retriever","Chocolate Labrador Retriever","Yellow Labrador Retriever"],
            cocker_spaniel:["English Cocker Spaniel", "Cocker Spaniel"]
          };

        var breed_paths = [{
                fill: "rgba(102,140,77,.8)",
                stroke: "rgba(0,0,0,.4)",
                d: "M341.733,72.318c-4.222,-2.629 -8.413,-5.195 -13.199,-6.747c-2.364,-0.766 -3.371,-4.153 -1.77,-5.565c1.617,-1.426 1.584,-2.843 0.7,-4.468c-3.34,-6.143 -7.141,-11.932 -12.898,-16.143c-4.665,-3.412 -9.346,-6.813 -13.398,-10.964c-2.851,-2.922 -2.2,-6.635 -1.959,-10.189c0.309,-4.558 1.226,-9.108 0.169,-13.675c-0.191,-0.826 -0.15,-2.068 -1.365,-2.057c-0.947,0.005 -1.387,1.015 -1.45,1.83c-0.203,2.594 -1.768,4.501 -3.023,6.586c-1.842,3.053 -4.411,5.817 -4.641,9.585c-0.227,3.775 -2.405,6.706 -3.836,9.964c-0.449,1.024 -1.299,1.158 -2.271,1.163c-3.442,0.019 -6.397,-2.402 -7.157,-6.09c-1.21,-5.831 -2.274,-11.686 -3.492,-17.517c-0.249,-1.204 -0.134,-3.015 -1.576,-3.294c-1.633,-0.32 -2.306,1.447 -3.187,2.553c-0.142,0.18 -0.301,0.369 -0.37,0.577c-1.359,4.298 -4.613,7.289 -7.321,10.657c-5.899,7.333 -9.648,15.891 -13.85,24.193c-0.591,1.16 -0.635,2.468 -0.498,3.806c0.205,2.046 0.221,4.115 0.323,6.175c0.043,0.966 -0.148,1.866 -0.958,2.46c-5.289,3.868 -8.643,9.42 -12.641,14.416c-1.904,2.383 -4.088,4.528 -5.754,7.122c-5.858,9.13 -11.352,18.491 -17.555,27.399c-0.656,0.947 -1.244,2.058 -2.333,2.468c-4.496,1.694 -8.838,3.905 -13.621,4.665c-2.689,0.427 -5.228,1.149 -7.581,2.438c-2.947,1.614 -5.826,3.355 -8.712,5.078c-0.873,0.523 -1.743,0.879 -2.785,0.876c-13.522,-0.019 -27.019,0.533 -40.519,1.33c-4.214,0.249 -8.351,0.651 -12.444,1.701c-8.722,2.249 -17.429,4.6 -26.228,6.504c-7.47,1.62 -13.336,5.059 -16.761,12.115c-2.279,4.693 -5.125,8.917 -9.043,12.515c-5.779,5.303 -9.705,11.905 -12.405,19.284c-2.228,6.08 -3.224,12.414 -4.209,18.742c-0.99,6.373 -2.027,12.63 -5.715,18.171c-4.438,6.668 -6.633,14.115 -7.738,22.055c-0.692,4.991 -1.628,10.168 -5.281,14.165c-1.751,1.915 -3.526,3.812 -5.412,5.598c-1.789,1.694 -2.93,3.664 -3.406,6.077c-0.862,4.375 -2.222,8.572 -4.602,12.392c-0.616,0.993 -0.736,2.126 -0.925,3.269c-0.547,3.308 -0.859,6.72 -1.937,9.858c-3.847,11.161 -6.457,22.718 -10.974,33.66c-1.188,2.87 0.073,5.171 2.684,5.39c8.068,0.684 16.096,2.815 24.244,0.181c2.739,-0.884 3.486,-1.325 2.999,-4.184c-0.178,-1.048 -0.618,-2.044 -0.851,-3.086c-0.763,-3.429 -2.98,-6.414 -3.13,-10.014c-0.534,-12.775 1.83,-24.759 9.136,-35.583c1.754,-2.599 3.639,-4.898 6.126,-6.676c1.901,-1.357 3.502,-2.947 4.862,-4.808c5.16,-7.064 11.223,-13.428 17.752,-19.084c5.721,-4.952 10.153,-10.684 14.46,-16.684c1.206,-1.678 2.386,-3.369 3.559,-5.065c0.512,-0.744 1.062,-1.272 2.08,-0.919c4.895,1.696 9.319,0.656 13.396,-2.345c1.321,-0.977 1.983,-0.607 2.355,0.963c0.906,3.863 1.951,7.697 2.873,11.557c0.578,2.416 0.167,4.739 -1.157,6.821c-1.272,1.995 -2.657,3.921 -4.424,5.535c-4.115,3.765 -8.124,7.648 -12.332,11.306c-2.782,2.421 -3.532,5.182 -2.47,8.616c0.424,1.379 0.927,2.807 0.678,4.265c-1.119,6.573 0.509,13.06 0.569,19.594c0.041,4.366 2.085,8.484 2.345,12.813c0.347,5.781 0.722,11.489 2.287,17.139c1.47,5.308 4.745,7.776 10.184,6.801c0.151,-0.027 0.296,-0.106 0.443,-0.109c2.121,-0.016 4.367,-0.484 6.332,0.06c3.803,1.056 7.595,0.46 11.387,0.654c1.836,0.09 2.244,-0.881 2.244,-2.585c-0.003,-5.366 -3.541,-8.553 -7.037,-11.752c-1.174,-1.07 -2.52,-1.921 -3.56,-3.193c-6.077,-7.437 -8.813,-15.962 -8.189,-25.498c0.336,-5.138 2.503,-9.598 6.345,-13.029c2.845,-2.539 6.126,-4.531 9.437,-6.465c11.472,-6.695 20.321,-15.785 25.09,-28.395c0.823,-2.192 1.797,-2.709 4.046,-2.003c8.791,2.755 17.919,3.644 27.046,4.397c2.988,0.249 3.098,0.372 2.767,3.466c-0.597,5.536 -1.341,11.082 -1.5,16.636c-0.462,15.886 0.148,31.769 0.389,47.651c0.024,1.626 -0.093,3.232 -0.821,4.698c-1.592,3.213 -0.755,5.908 1.625,8.321c0.862,0.87 1.721,1.71 1.91,3.034c0.876,6.058 1.622,12.118 0.533,18.231c-0.197,1.111 -0.019,2.18 0.775,2.998c0.867,0.898 1.13,1.981 1.182,3.133c0.104,2.304 0.552,4.173 3.573,3.606c0.372,-0.071 0.846,0.299 1.248,0.509c1.874,0.985 3.907,1.322 5.981,1.357c3.053,0.055 6.11,0.014 9.166,0.014c4.098,-0.254 8.235,0.621 12.32,-0.405c1.992,-0.501 2.367,-1.543 1.751,-3.373c-1.729,-5.139 -5.056,-8.947 -9.54,-11.853c-2.613,-1.691 -5.051,-3.661 -5.642,-6.887c-0.865,-4.722 -1.738,-9.456 -1.94,-14.282c-0.222,-5.254 1.664,-10.299 1.078,-15.659c-0.777,-7.138 0.339,-14.337 0.249,-21.514c-0.068,-5.067 0.364,-10.055 1.442,-15.007c1.007,-4.627 1.841,-9.292 2.813,-13.924c0.733,-3.486 1.264,-3.905 4.67,-4.589c4.29,-0.861 8.709,-0.492 12.975,-1.321c6.999,-1.36 13.915,-3.045 19.347,-8.184c0.369,-0.347 0.823,-0.87 1.376,-0.626c0.599,0.268 0.342,0.957 0.328,1.447c-0.041,1.45 -0.052,2.911 -0.265,4.334c-2.277,15.12 -3.724,30.305 -3.732,45.605c-0.003,5.732 -0.074,11.462 -0.501,17.175c-0.208,2.799 -0.476,5.578 -2.471,7.934c-1.373,1.623 -0.853,3.617 1.221,4.542c2.714,1.209 2.996,3.196 2.476,5.642c-0.463,2.167 -0.963,4.326 -1.541,6.463c-0.29,1.083 -0.424,2.101 0.186,3.089c2.613,4.224 3.41,9.072 4.685,13.743c0.525,1.918 1.658,2.679 3.477,3.103c5.921,1.379 11.929,0.528 17.886,0.878c4.709,0.282 9.36,-1.119 14.107,-0.487c1.292,0.17 2.627,-0.64 1.833,-2.282c-2.941,-6.082 -7.064,-10.996 -13.809,-13.081c-2.678,-0.826 -4.985,-2.162 -5.918,-4.931c-2.843,-8.429 -4.153,-17.144 -2.993,-25.957c1.048,-7.934 2.676,-15.798 3.778,-23.741c0.914,-6.594 4.022,-12.49 6.452,-18.572c3.327,-8.329 5.237,-16.838 5.24,-25.859c0,-6.37 1.28,-12.586 4.055,-18.43c1.212,-2.553 2.112,-5.248 3.335,-7.793c3.965,-8.249 5.658,-16.838 4.569,-26.004c-0.394,-3.313 -0.131,-6.695 0.263,-10.057c0.446,-3.853 1.264,-7.672 0.952,-11.618c-0.591,-7.423 -2.008,-14.684 -4.276,-21.746c-0.947,-2.942 -0.236,-5.374 0.96,-7.891c0.804,-1.694 2.044,-2.413 3.91,-1.697c0.782,0.301 1.606,0.509 2.358,0.865c4.835,2.29 9.724,4.43 14.767,6.247c8.107,2.922 15.188,1.097 20.578,-5.623c0.832,-1.032 1.683,-0.876 2.638,-0.531c3.277,1.193 6.15,0.687 8.911,-1.554c1.579,-1.286 2.495,-2.654 2.337,-4.651c-0.236,-3.013 -1.429,-5.442 -4.334,-6.756c-1.344,-0.607 -2.504,-1.45 -3.456,-2.585c-0.55,-0.652 -0.624,-1.062 0.257,-1.59c5.158,-3.089 8.296,-7.705 9.73,-13.473c0.438,-1.767 0.284,-3.688 0.777,-5.431c0.517,-1.819 -0.408,-3.655 0.317,-5.387c1.713,-4.08 0.791,-6.35 -3.015,-8.723"}
        ];


        results.map(dog => {
            console.log(dog);
            Object.keys(breed_dict).forEach(
                key =>
                {
                    breed_dict[key].map((item) => {
                        if (item === dog){
                            return console.log("FOUND", key)
                        }
                    })
                }
            )
        })

        const svgCanvas = d3.select(this.refs.canvas)
            .append("svg")
            .attr('viewBox','0 0 '+Math.min(width,height) +' '+Math.min(width,height) )
            .style("border", "1px solid black")
            .attr("width", width)
            .attr("height", height)
            .append('path')
            .attr("d", breed_paths[0].d)
            .style("stroke", breed_paths[0].stroke)
            .style("fill", breed_paths[0].fill);

    
    }


    drawPieChart(results, width, height, color) {


        // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
        let radius = Math.min(width, height) / 2 * 0.8;

        const svgCanvas = d3.select(this.refs.canvas)
            .append("svg")
            .attr('viewBox','0 0 '+Math.min(width,height) +' '+Math.min(width,height) )
            .style("border", "1px solid black")
            .attr("width", width)
            .attr("height", height)
        
        const g = svgCanvas.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
    
        //console.log(results.gender)
        // Generate the pie
        var pie = d3.pie();

        // Generate the arcs
        var arc = d3.arc()
                    .innerRadius(0)
                    .outerRadius(radius);

        // Create array of objects of search results to be used by D3
        var data = [];
        Object.entries(results).forEach(([key, value]) => {
            console.log(key, value)
            data.push({
                count: value,
                name: key
              });
 
        })


        console.log(data)
        //Generate groups
        var arcs = g.selectAll("arc")
                    .data(pie(data.map(d => d.count)))
                    .enter()
                    .append("g")
                    .attr("class", "arc")
                    

        //Draw arc paths
        arcs.append("path")
            .attr("fill", function(d, i) {
                return color(i);
            })
            .attr("d", arc);

        arcs.selectAll("path")
            .transition()
                .delay(function(d, i) {
                return i * 800;
                })
                    .attrTween('d', function(d) {
            var i = d3.interpolate(d.startAngle+0.1, d.endAngle);
            return function(t) {
                d.endAngle = i(t);
                return arc(d);
            }
            });
            

        const arcLabel =  d3.arc().innerRadius(radius).outerRadius(radius);
            
       /* arcs.append("text")
            .attr("transform", function(d) { 
                    return "translate(" + arcLabel.centroid(d) + ")"; 
            })
            .text(data.map(d => d.count));*/

        // again rebind for legend
        
        var legendG = svgCanvas.selectAll(".legend") // note appending it to mySvg and not svg to make positioning easier
        .data(pie(data))
        .enter().append("g")
        .attr("transform", function(d,i){
            return "translate(" + 0 + "," + (i * 15 + 10) + ")"; // place each legend on the right and bump each one down 15 pixels
        })
        .attr("class", "legend");   

        legendG.append("rect") // make a matching color rect
        .attr("width", 10)
        .attr("height", 10)
        .attr("fill", function(d, i) {
            return color(i);
        });

        legendG.append("text") // add the text
        .text(function(d){
            return d.data.name + "  " + d.data.count;
        })
        .style("font-size", 12)
        .attr("y", 10)
        .attr("x", 11);

    }


    


    render() {
        return (
            <div ref="canvas"></div>
        );
    }
}

export default D3CountyViz;
